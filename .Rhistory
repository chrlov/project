getwd()
installed.packages()
getwd()
setwd()
library(tidyverse)
#> ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
#> ✔ ggplot2 3.3.0     ✔ purrr   0.3.4
#> ✔ tibble  3.0.1     ✔ dplyr   0.8.5
#> ✔ tidyr   1.0.3     ✔ stringr 1.4.0
#> ✔ readr   1.3.1     ✔ forcats 0.5.0
#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
#> ✖ dplyr::filter() masks stats::filter()
#> ✖ dplyr::lag()    masks stats::lag()
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
# Open up the mpg data set
mpg
# To plot mpg, run this code to put displ on the x-axis and hwy on the y-axis:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
# Exercises
ggplot(data=mpg)
# Exercises
ggplot(data = mpg)
rows(data = mpg)
?mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = hwy, y = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = class, y = drv))
?mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = hwy, y = cyl))
# A graphing template
ggplot(data = <DATA>) +
<GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))
library(tidyverse)
# To plot mpg, run this code to put displ on the x-axis and hwy on the y-axis:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
?ggplot
# Right
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = class))
# Left
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
?++++++++mmmmmmmmmmmpg
?mpg
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = class))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
)
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
)
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
) +
geom:pont(
mapping = aes(x = displ, y = hwy, color = drv)
)
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
) +
geom_point(
mapping = aes(x = displ, y = hwy, color = drv)
)
ggplot(data = diamonds)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
getwd()
install.packages("microbenchmark")
library(dplyr)
library(readr)
# Simple loop:
for(i in 1:10) {
print(i)
}
print(i)
# Understanding the syntax
for(i in c(1,2,3,6,7,8)) {
print(i)
}
for(i in c(1,2,3,6,7,8)) {
print(i)
}
# Very useful to run over all elements in an object and *do something*
x <- seq(from = 1,
to = 100,
length.out = 20)
# I want a vector y with the cumulative sum of x. We first create an empty vector
y <- rep(NA, length(x))
y[1] <- x[1]
y[2] <- sum(x[1:2])
y[3] <- sum(x[1:3])
y[i] <- sum(x[1:i])
# Boring, let's do that in a for loop
for(i in 1:length(x)) {
y[i] <- sum(x[1:i])
}
z <- rep(NA, length(x))
for(i in 1:length(x)) {
z[i] <- sum(x[1:i])
}
z[i] <- sum(x[i+(i-1)])
for(i in 1:length(x)) {
z[i] <- sum(x[i+(i-1)])
}
library(COVID19)
library(tidyverse)
library(ggplot2)
# Worldwide data by country
data <- covid19()
data_norway <- data %>%
filter(id == "NOR") %>%
mutate(still_sick = confirmed - recovered)
plot <- data %>%
ggplot(data = data_norway,
mapping = aes(x = date)) +
geom_line(aes(y = recovered,
color = "Recovered")) +
geom_line(aes(y = confirmed,
color = "Confirmed")) +
geom_line(aes(y = still_sick,
color = "Theoretically still sick")) +
scale_y_continuous(breaks = seq(0,1000000, by = 1000)) +
scale_x_date(date_breaks = "1 week",
date_labels = "%U") +
labs(title = "Covid-19 in Norway",
fill = "") +
ylab("Number of people") +
xlab("Uke") +
theme(legend.title = "Test") +
theme_light()
plot
plot <- data %>%
ggplot(data = data_norway,
mapping = aes(x = date)) +
geom_line(aes(y = recovered,
color = "Recovered")) +
geom_line(aes(y = confirmed,
color = "Confirmed")) +
geom_line(aes(y = still_sick,
color = "Theoretically still sick")) +
scale_y_continuous(breaks = seq(0,1000000, by = 1000)) +
scale_x_date(date_breaks = "1 week",
date_labels = "%U") +
labs(title = "Covid-19 in Norway",
fill = "") +
ylab("Number of people") +
xlab("Uke") +
theme(legend.title = "Test") +
theme_bw()
plot
x <- rnorm(100)
# Load packages
library(shiny)
library(shinythemes)
install.packages("shinythemes")
library(shinythemes)
library(dplyr)
library(readr)
# Load data
trend_data <- read_csv("data/trend_data.csv")
trend_description <- read_csv("data/trend_description.csv")
# Load data
data <- read_csv("https://api.acleddata.com/acled/read.exportcsv")
# Load data
data <- read_csv("Documents/Skole/Master/Semester 1/BAN400:420/BAN400/Term Project - BAN400/ACLED data.csv")
trend_data <- read_csv("data/trend_data.csv")
setwd("~/Documents/Skole/Master/Semester 1/BAN400/project")
